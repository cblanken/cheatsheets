{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello there!","text":"<p>This is a repository of all my personal cheatsheets for programming, software, security, and *nix stuff.</p> <p>Happy hacking!</p>"},{"location":"%2Anix/bash/","title":"Bash","text":""},{"location":"%2Anix/bash/#tools","title":"Tools","text":"<ul> <li>ShellCheck: static analysis tool for shell scripts</li> </ul>"},{"location":"%2Anix/cron/","title":"Cron","text":""},{"location":"%2Anix/cron/#gotchas","title":"Gotchas","text":"<p>DON'T FORGET TO LEAVE A NEWLINE AT THE END OF THE CRONTAB, otherwise it won't be executed.</p>"},{"location":"%2Anix/linux/","title":"Linux Terminal","text":""},{"location":"%2Anix/linux/#get-help","title":"Get Help","text":"<ul> <li><code>man &lt;command&gt;</code>: open man page for command</li> <li><code>curl cheat.sh/&lt;command&gt;</code>: get <code>cheat.sh</code> command examples</li> <li><code>tldr &lt;command&gt;</code> get <code>tldr</code> command examples</li> </ul>"},{"location":"%2Anix/linux/#useful-commands","title":"Useful Commands","text":"<ul> <li><code>hostnamectl</code>: change hostname</li> <li><code>sudo -i</code>: login as root via sudo</li> <li><code>timedatctl</code>: check/set timezone</li> <li><code>history</code>: list shell history</li> <li><code>compgen -c</code>: list all available commands</li> <li><code>compgen -a</code>: list all aliases</li> <li><code>compgen -k</code>: list reserved shell keywords</li> </ul>"},{"location":"%2Anix/linux/#bash-tips","title":"Bash Tips","text":"<ul> <li>Open text editor to enter a command</li> <li>Default mode (Emacs): <code>C-x C-e</code></li> <li>vi mode: <code>Esc v</code></li> <li>Use <code>!</code> for history substitution: e.g. <code>!3</code> to execute the 3rd command in the history</li> <li>Use <code>!!</code> to execute the previous command</li> <li>Use <code>!cd</code> to execute the most recent <code>cd</code> command. This also applies to any other commands</li> </ul>"},{"location":"%2Anix/linux/#keyboard-shortcuts-default-emacs","title":"Keyboard Shortcuts (default Emacs)","text":"<ul> <li><code>C-c</code>: to</li> <li><code>C-a</code>: jump to start of line</li> <li><code>C-e</code>: jump to end of line</li> <li><code>C-u</code>: delete to start of line</li> <li><code>C-k</code>: delete to end of line</li> <li><code>C-l</code>: clear screen</li> </ul>"},{"location":"%2Anix/systemd/","title":"Systemd","text":""},{"location":"%2Anix/systemd/#dependencies-and-execution-order","title":"Dependencies and execution order","text":"<ul> <li>systemd manpage</li> </ul>"},{"location":"%2Anix/systemd/#general-ordering-dependencies","title":"General Ordering (dependencies)","text":"<ul> <li>Which units are effected?</li> </ul>"},{"location":"%2Anix/systemd/#wants-wantedby","title":"Wants, WantedBy","text":""},{"location":"%2Anix/systemd/#requires-requiredby","title":"Requires, RequiredBy","text":""},{"location":"%2Anix/systemd/#explicit-ordering-execution-order","title":"Explicit Ordering (Execution Order)","text":"<ul> <li>In what order are units started?</li> </ul>"},{"location":"%2Anix/systemd/#before","title":"Before","text":""},{"location":"%2Anix/systemd/#after","title":"After","text":""},{"location":"%2Anix/systemd/#others","title":"Others","text":"<ul> <li>Requisite</li> <li>BindsTo</li> <li>PartOf</li> <li>Conflicts</li> </ul>"},{"location":"misc/chrome/","title":"Chrome / Chromium","text":""},{"location":"misc/chrome/#tipstricks","title":"Tips/Tricks","text":"<ul> <li>When met with an invalid security certificate, type <code>thisisunsafe</code> on the denial page to add it to a safe list so you won't be prompted again.</li> </ul>"},{"location":"misc/gnuplot/","title":"gnuplot","text":""},{"location":"misc/gnuplot/#shorthand-command-aliases","title":"Shorthand / Command Aliases","text":"<ul> <li>linecolor: lc</li> <li>plot: p</li> <li>pointtype: pt</li> <li>replot: rep</li> <li>title: t</li> <li>with lines: w l</li> <li>with points: w p</li> </ul>"},{"location":"misc/gnuplot/#lines","title":"Lines","text":"<p>The following commands must be preceded with a <code>with lines</code> <pre><code>linecolor rgb \"black\" # set line color\ndashtype 2 # set lines to dashtype pattern 2\n</code></pre></p>"},{"location":"misc/gnuplot/#output-plot-size","title":"Output / Plot Size","text":"<pre><code>set size square # force plot to square\n</code></pre>"},{"location":"misc/gnuplot/#latex-tex-formatting","title":"LaTeX / TeX Formatting","text":""},{"location":"misc/gnuplot/#misc","title":"Misc","text":"<pre><code>test # shows available lines, patterns, etc.\n</code></pre>"},{"location":"misc/google-dorking/","title":"Google-dorking","text":""},{"location":"misc/google-dorking/#resources","title":"Resources","text":"<ul> <li>Blackhat Google Hacking for Penetration Testers</li> <li>Advanced search operators list (last updated Feb 8, 2024)</li> </ul>"},{"location":"misc/google-dorking/#operators-and-search-tips","title":"Operators and Search Tips","text":"<ol> <li>Use Boolean search terms: <code>AND</code>, <code>OR</code>,<code>NOT</code> (there is an implied AND between search terms)<ul> <li><code>red OR blue OR orange fruit</code></li> </ul> </li> <li>Use quotes to search for terms in the exact order specified (good for error messages and disambiguation)<ul> <li><code>\"ls: cannot access\"</code></li> </ul> </li> <li>Exclude non-necessary words<ul> <li><code>How did Frederick Douglass affect the Civil War?</code> vs <code>Frederick Douglass Civil War OR \"Frederick Douglass\" \"Civil War\"</code></li> </ul> </li> <li>Search for a range of numbers or prices with <code>..</code><ul> <li><code>headphones $50..$100</code></li> </ul> </li> <li>Exclude words from search with <code>-</code><ul> <li><code>jaguar speed -car</code></li> </ul> </li> <li>Restrict the domain with <code>site:</code><ul> <li><code>site:.edu shays' rebellion</code></li> </ul> </li> <li>Search for related sites with <code>related:</code><ul> <li><code>related:snopes.com</code></li> </ul> </li> <li>See Google's cached version of a site with <code>cache:</code><ul> <li><code>cache:arstechnica.com</code></li> </ul> </li> <li>Restrict results to pages containing the query terms in the anchor text on links to the page with <code>allinanchor:</code> and <code>inanchor:</code><ul> <li><code>allinanchor: best restaurant Sunnyvale</code></li> <li><code>inanchor:sales offer 2011</code></li> </ul> </li> <li>Restrict results to pages containing the query terms in the text of the page with <code>allintext:</code> and <code>intext:</code> NOTE: intext only applies to the next term<ul> <li><code>allintext: camping tent stove</code></li> <li><code>intext:Victorian artists</code></li> </ul> </li> <li>Restrict results to pages containing the query terms in the title of the page with <code>allintitle:</code> and <code>intitle:</code><ul> <li><code>allintitle: flu shot</code></li> <li><code>intitle:flu shot</code></li> </ul> </li> <li>Restrict results to pages containing the query terms in the URL with <code>allinurl:</code> and <code>inurl:</code><ul> <li><code>allinurl:google faq</code></li> <li><code>inurl:google faq</code></li> </ul> </li> <li>Use <code>AROUND</code> to limit results to those documents where <code>term1</code> appears within a \"n\" words of <code>term2</code>.<ul> <li><code>search AROUND 3 engine</code></li> </ul> </li> <li>Use <code>before:</code> to find results that were published before a given date<ul> <li><code>avengers endgame before:2018-1-1</code></li> </ul> </li> <li>Use <code>after:</code> to find results that were published before a given date<ul> <li><code>avengers endgame after:2020-1-1</code></li> </ul> </li> <li>Use <code>define</code> to get definitions for words and phrases<ul> <li><code>define peruse</code></li> </ul> </li> <li>Use <code>filetype:suffix</code> to limit search to pages ending with the specified filetype<ul> <li><code>filetype:pptx</code></li> </ul> </li> <li>Use <code>*</code> (wildcards) to fill in the blanks. It matches up to 5 terms.<ul> <li><code>Obama voted * on the * bill</code></li> </ul> </li> <li>Use <code>Advanced Search</code>. You can easily select parameters from here.</li> </ol>"},{"location":"misc/source_engine/","title":"Source Engine Console","text":"<ul> <li>Console Command List</li> <li>Half-Life 2</li> <li>CS:S</li> <li>CS:GO</li> <li>TF2</li> <li>L4D</li> <li>L4D2</li> <li>Portal 2</li> </ul>"},{"location":"misc/source_engine/#general-server","title":"General / Server","text":"<p>| Command       | Description | | ------------- | ----------- | -------------------------------------------------------------------------- | | <code>sv_cheats [0 | 1]</code>         | sets <code>sv_cheats</code> on/off. Note <code>sv_cheats</code> is necessary before some actions |</p>"},{"location":"misc/source_engine/#players","title":"Players","text":"Command Description <code>kick &lt;user&gt;</code> kicks user by username <code>kick_all</code> kicks all players except local server host"},{"location":"misc/source_engine/#weapons","title":"Weapons","text":"Command Description <code>give &lt;weapon&gt;</code> spawns weapon on top of the player"},{"location":"networking/tcpdump/","title":"tcpdump","text":"<p>TODO</p>"},{"location":"programming/asm/","title":"ASM (x86)","text":"<ul> <li>Online Assembler / Disassembler</li> <li>Compiler Explorer</li> </ul>"},{"location":"programming/asm/#instructions","title":"Instructions","text":"<pre><code>add\ncall\nje\njmp\njne\nmov\npush\nsub\nvar\n</code></pre>"},{"location":"programming/asm/#registers","title":"Registers","text":"<pre><code>ebp\nesp\neax\nebx\n</code></pre>"},{"location":"programming/c/","title":"C","text":""},{"location":"programming/c/#syntax","title":"Syntax","text":"<pre><code>// Printing\n// Printing to STDOUT\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint main(void) {\n    if(puts(\"Hello, world!\") == EOF) {\n        return EXIT_FAILURE;\n    }\n    return EXIT_SUCCESS;\n}\n\n// Formatted output\nprintf(\"%s\\n\", \"Hello, world!\");\n\n// Operators\n// Increment and Decrement Operators \"++\" and \"--\"\nint e, i = 5;\ne = i++; // postfix increment: i has the value 6; e has the value 5\ne = i--; // postfix decrement: i has the value 5; e has the value 6\ne = ++i; // prefix increment: i has the value 6; e has the value 6\ne = --i; // prefix decrement: i has the value 5; e has the value 5\n</code></pre>"},{"location":"programming/c/#files-io","title":"Files / IO","text":""},{"location":"programming/c/#sockets-networking","title":"Sockets / Networking","text":""},{"location":"programming/c/#build-tools","title":"Build Tools","text":"<ul> <li>make</li> <li>CMake</li> </ul>"},{"location":"programming/c/#testing-frameworks","title":"Testing Frameworks","text":"<ul> <li>tau</li> <li>Check</li> </ul>"},{"location":"programming/css/","title":"CSS","text":"<p>Capital letters (A, B, C, etc.) are used to indicate when syntax can be applied to essentially any CSS selector.</p>"},{"location":"programming/css/#syntax-common-properties","title":"Syntax &amp; Common Properties","text":"<pre><code>/* comments */\n\n/* specify CSS rule */\n&lt;selector &gt; {\n  &lt;rule1&gt;: &lt;value&gt;;\n  &lt;rule2&gt;: &lt;value&gt;;\n}\n</code></pre>"},{"location":"programming/css/#basic-selectors-types","title":"Basic Selectors Types","text":"<pre><code>/* any selector */\n* {...}\n\n/* id selector */\n#idName {...}\n\n/* class selector */\n.className {...}\n\n/* tag selector */\ntag {...}\n\n/* use \":\" to designate a pseudo class\nA:pseudo-class {...}\n</code></pre>"},{"location":"programming/css/#combinator-selectors","title":"Combinator Selectors","text":"<p>Combine selectors for more specificity</p> <pre><code>/* descendant selector */\nA B {...} /* target all B elements which are inside a A element */\n\n/* adjacent selector */\nA + B {...} /* target B elements which are immediately preceded by an A element */\n\n/* direct descendant selector */\nA &gt; B {...} /* target B elements which are direct children of A (only children not grandchildren) */\n\n/* sibling selector */\nA ~ B {...} /* target B elements which are preceded by an A element (less strict version of \"+\" selector */\n</code></pre>"},{"location":"programming/css/#attribute-selectors","title":"Attribute Selectors","text":"<p>Target elements with the attribute specified in square brackets [...]</p> <pre><code>A[attribute=\"value\"] {...}\n\n/* some simple regex can be used when selecting on an attribute */\na[href*=\"google.com\"]   /* select any &lt;a&gt; tag with a href attribute containing \"google.com\" */\na[href^=\"http\"]         /* select any &lt;a&gt; tag with a href attribute beginning with \"http\" */\na[href$=\".com\"]         /* select any &lt;a&gt; tag with a href attribute ending with \".com\" */\n\n/* custom attributes can be used to apply rules, e.g. to select all anchor tag images */\na[data-filetype=\"image\"] {...}\n\n/* ~ can be used to target attributes with a space-seperated list of values e.g. */\na[data-info~=\"external\"] {...}\n</code></pre>"},{"location":"programming/css/#pseudo-selectors","title":"Pseudo Selectors","text":""},{"location":"programming/css/#pseudo-classes","title":"Pseudo-classes","text":"<p>A Pseudo-class can target an element in a certain state</p> <pre><code>/* Common pseudo-classes */\nA:before {...}  /* target the element _before_ an element A */\nA:after {...}   /* target the element _after_ an element A */\nA:hover {...}   /* target an element on hover */\nA:not(B) {...}  /* target all elements EXCEPT for the B selector */\n\n/* Nth child and type selectors */\nA:nth-child(n) {...}        /* target the nth child of parent element A */\nA:nth-last-child(n) {...}   /* same as above starting from the last child */\nA:nth-of-type(n) {...}      /* target the nth element of type A */\nA:nth-last-of-type(n) {...} /* same as above starting from the last element A */\nA:first-child {...}         /* target the first child of an element A */\nA:last-child {...}          /* target the last child of an element A */\nA:only-child {...}          /* target elements which are the only child of its parent */\nA:only-of-type {...}        /* target elements that don't have any siblings */\nA:first-of-type {...}       /* target the first sibling of type A */\n\n/* Link pseudo-classes */\na:link {...}    /* target all anchor tags which have not yet been clicked */\na:visited {...} /* target all anchor tags which have been clicked */\n\n/* target a UI element (radio button or checkbox) that has been checked */\ninput[type=\"radio\"]:checked {...}\n</code></pre>"},{"location":"programming/css/#pseudo-element","title":"Pseudo-element","text":"<p>A Pseudo-element is a keyword added to a selector that lets you style a specific part of the selected element(s)</p> <pre><code>/* target fragments of an element with A::pseudo-element, notice the :: */\nA::first-letter {...}   /* target the first letter of an element */\nA::first-line {...}     /* target the first line of an element */\n</code></pre>"},{"location":"programming/css/#multiple-selectors","title":"Multiple Selectors","text":"<pre><code>/* a css rule can be applied to multiple selectors by using a comma delimited\nlist prior to the definition e.g. set backgorund color to blue for h1, h2, and\nh3 elements */\n\nh1,\nh2,\nh3 {\n  background-color: blue;\n}\n</code></pre>"},{"location":"programming/css/#flexbox","title":"Flexbox","text":"<p>TODO</p>"},{"location":"programming/css/#css-grid","title":"CSS Grid","text":"<p>TODO</p>"},{"location":"programming/git/","title":"Git","text":""},{"location":"programming/git/#logs","title":"Logs","text":"<pre><code>git log --oneline # concise output with a truncated hash and commit message\n</code></pre>"},{"location":"programming/git/#commits","title":"Commits","text":"<ul> <li>Rules to live by</li> <li>Don't end commit messages with a period (<code>.</code>)</li> <li>Keep commit messages under 50 characters</li> <li>Use active voice (e.g. \"add\" instead of \"added\" and \"merge\" instead of \"merged\")</li> <li>Think of your commit as expressing intent to introduce a change</li> </ul> <pre><code>git commit # open default editor to write commit message\ngit commit -m \"message\" # commit with \"message\"\n</code></pre>"},{"location":"programming/git/#workflow","title":"Workflow","text":"<p>TODO</p>"},{"location":"programming/javascript/","title":"JavaScript","text":""},{"location":"programming/javascript/#operators-flow-control","title":"Operators &amp; Flow Control","text":""},{"location":"programming/javascript/#numbers","title":"Numbers","text":"<p>JS has a single Number type</p> <pre><code>// Arithmetic\n1 + 1; // = 2\n8 - 7; // = 1\n10 * 3; // = 30\n40 / 8; // = 5\n\n// Modulo\n22 % 2; // = 0\n27 % 4; // = 3\n9 % 2.5; // = 1.5\n\n// Infinity and non real numbers\nInfinity - Infinity;\nNumber.POSITIVE_INFINITY; // alias for Infinity\nNumber.NEGATIVE_INFINITY; // alias for -Infinity\n</code></pre>"},{"location":"programming/javascript/#booleans-comparisons","title":"Booleans / Comparisons","text":"<p>TODO</p>"},{"location":"programming/javascript/#patterns","title":"Patterns","text":"<p>TODO</p>"},{"location":"programming/javascript/#objects","title":"Objects","text":"<ul> <li>Built-Ins</li> </ul>"},{"location":"programming/javascript/#closures","title":"Closures","text":"<p>TODO</p>"},{"location":"programming/javascript/#prototypal-inheritance","title":"Prototypal Inheritance","text":"<p>TODO</p>"},{"location":"programming/javascript/#factories","title":"Factories","text":"<pre><code>const Player = (name, teamSymbol) =&gt; {\n  let score = 0;\n  const getName = () =&gt; name;\n  const setName = (x) =&gt; (name = x);\n  const getTeamSymbol = () =&gt; teamSymbol;\n  const setTeamSymbol = (x) =&gt; (teamSymbol = x);\n  const getScore = () =&gt; score;\n  const incrementScore = () =&gt; {\n    score++;\n  };\n\n  const play = (x, y, gameBoard) =&gt; {\n    console.log(`${name} played at [${x}, ${y}]!`);\n  };\n\n  return {\n    getName,\n    setName,\n    getTeamSymbol,\n    setTeamSymbol,\n    getScore,\n    incrementScore,\n    play,\n  };\n};\n</code></pre>"},{"location":"programming/javascript/#module-pattern","title":"Module Pattern","text":""},{"location":"programming/javascript/#classes","title":"Classes","text":"<p>TODO: list of all class features</p> <pre><code>class User {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayHi() {\n    alert(this.name);\n  }\n}\n\nlet user = new User(\"John\");\nuser.sayHi();\n</code></pre>"},{"location":"programming/javascript/#dom-manipulation","title":"DOM Manipulation","text":"<p>TODO</p>"},{"location":"programming/php/","title":"PHP","text":""},{"location":"programming/php/#misc","title":"Misc","text":"<ul> <li>If you get a blank SOD, enable display of errors in <code>php.ini</code>. The location depends on the installation and web server but usually: <code>/etc/php/X.Y/apache2/php.ini</code> where <code>X.Y</code> is the PHP version.</li> </ul>"},{"location":"programming/php/#standard-php-library-spl","title":"Standard PHP Library (SPL)","text":"<p>TODO</p>"},{"location":"programming/python/","title":"Python","text":"<p>TODO</p> <pre><code># Operators\n\n# Loops\n\n# Lists\n\n# Tuples\n\n# Dictionaries\n\n# Sets and Unions\n\n# Iterators\n\n# List comprehensions\n\n# Generators\n\n# Assertions\n\n# Context Managers / with\n\n# Classes / OOP\n\n# Decorators\n</code></pre>"},{"location":"programming/python/#performance","title":"Performance","text":"<ul> <li>Python wiki</li> <li>Python Performance Tuning: 20 Simple Tips</li> </ul>"},{"location":"programming/python/#project-management-and-virtual-environments","title":"Project Management and Virtual Environments","text":"<ul> <li>uv</li> <li>Virtualenv</li> <li>Poetry</li> </ul>"},{"location":"programming/rust/","title":"Rust","text":"<ul> <li>The Book</li> <li>Keywords</li> <li>Operators and Symbols</li> <li>Dev Tools</li> <li>Standard Library</li> </ul>"},{"location":"programming/rust/#guidelines-best-practices","title":"Guidelines / Best Practices","text":"<ul> <li>API Guidelines</li> </ul>"},{"location":"programming/rust/#useful-macros","title":"Useful Macros","text":"<pre><code>// The print line macro for writing to STDOUT\n!println(\"The value of x is {x}\");\n!println(\"The value of x is {}\", x);\n\n// The debug macro, !dbg writes out to STDERR and it includes\n// the file and line number where the !dbg invocation was made\n!dbg(x);\n</code></pre>"},{"location":"programming/rust/#comments","title":"Comments","text":"<pre><code>// Single line comment\n</code></pre> <pre><code>/// Documentation comment. They also support markdown notation\n/// # Heading 1\n/// ```\n/// let one = 1;\n/// ```\n</code></pre>"},{"location":"programming/rust/#variables","title":"Variables","text":""},{"location":"programming/rust/#declaration","title":"Declaration","text":"<p>Declare variables with the <code>let</code> keyword. By default, variable binding is immutable.</p> <pre><code>let     x: i32 = 42;    // immutable binding\nlet mut x: i32 = 42;    // mutable binding\n</code></pre>"},{"location":"programming/rust/#shadowing","title":"Shadowing","text":"<p>Variables can be shadowed, which allows reuse of variable names in the same scope</p>"},{"location":"programming/rust/#numerics","title":"Numerics","text":""},{"location":"programming/rust/#declaration_1","title":"Declaration","text":"<p>The Rust compiler can infer what type a variable is</p> <pre><code>let x: i32 = 10;\nlet y: f64 = 2.17;\n</code></pre> <p>Or you can Use suffixes for explicit initialization of numerics</p> <pre><code>let i: i32 = 42i32;     // i = 42\nlet f: f64 = 3.14f64;   // f = 3.14\n</code></pre>"},{"location":"programming/rust/#control-flow","title":"Control Flow","text":""},{"location":"programming/rust/#the-match-statement","title":"The <code>match</code> statement","text":"<p>A control-flow construct to compare values against a series of patterns. It's like a more powerful and complex <code>switch</code> statement in C.</p> <pre><code>enum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter,\n}\n\nfn value_in_cents(coin: Coin) -&gt; u8 {\n    match coin {\n        Coin::Penny =&gt; 1,\n        Coin::Nickel =&gt; 5,\n        Coin::Dime =&gt; 10,\n        Coin::Quarter =&gt; 25,\n    }\n}\n</code></pre>"},{"location":"programming/rust/#the-if-let-statement","title":"The <code>if let</code> statement","text":"<p>This statement is a succinct way to handle match patterns and is essentially syntactic sugar for a <code>match</code> that ignores all other values by default. In other words <code>if let</code> does not perform exhaustive checking like a <code>match</code> statement.</p> <pre><code>let config_max = Some(3u8);\nif let Some(max) = config_max {\n    println!(\"The maximum is configured to be {}\", max);\n}\n</code></pre>"},{"location":"programming/rust/#looping","title":"Looping","text":"<p>An infinite loop with <code>break</code></p> <pre><code>let mut counter = 0;\nlet result = loop {\n    counter += 1;\n\n    if counter == 10 {\n        break counter * 2;\n    }\n};\n\nprintln!(\"The result is {result}\");\n</code></pre> <pre><code>// Returns are implicit with no semicolon on the last line\nfn multiply(x: i32, y: i32) -&gt; i32 {\n    x * y\n}\n\n// You can also use an explicit `return` statement\nfn multiply(x: i32, y:i32) -&gt; i32 {\n    return x * y;\n}\n</code></pre> <p>The conventional style for function names in rust is snake case.</p> <pre><code>fn hello_world() {\n    println!(\"Hello World!\");\n}\n</code></pre>"},{"location":"programming/rust/#scoping","title":"Scoping","text":"<ul> <li>Curly braces <code>{}</code></li> <li>The <code>use</code> keyword</li> <li><code>local</code> keyword</li> <li><code>static</code> lifetime</li> </ul>"},{"location":"programming/rust/#non-lexical-lifetimes-nll","title":"Non-Lexical Lifetimes (NLL)","text":""},{"location":"programming/rust/#memory-management","title":"Memory Management","text":""},{"location":"programming/rust/#ownership","title":"Ownership","text":"<p>Ownership refers to the set of rules used by Rust to ensure safety during memory management.</p>"},{"location":"programming/rust/#references-and-borrowing","title":"References and Borrowing","text":"<p>A reference is specified with the ampersand (<code>&amp;</code>). Dereferencing is done with the asterisk (<code>*</code>)</p> <pre><code>fn main() {\n    let s1 = String::from(\"hello\");\n    let len = calculate_length(&amp;s1); // calculate length with borrowed s1\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n</code></pre> <p>Rust allows for as many unmutable (default) references to a variable as you want. However, you can only have a single mutable reference to a variable.</p>"},{"location":"programming/rust/#slices","title":"Slices","text":""},{"location":"programming/rust/#string-slices","title":"String Slices","text":"<pre><code>let s = String::from(\"hello\");\nlet slice = &amp;s[0..2];   // slice from index 0 with length of 2\nlet slice = &amp;s[..2];    // same as above\nlet slice = &amp;s[2..];    // slice from index 2 to end of string\nlet slice = &amp;s[..];     // slice of entire string\n</code></pre> <p>Be wary of mutibyte UTF-8 characters. See Storing UTF-8 Encoded Text with Strings</p>"},{"location":"programming/rust/#collection-slices","title":"Collection Slices","text":"<pre><code>let a = [1, 2, 3, 4, 5];\nlet slice = &amp;a[1..3];\nassert_eq!(slice, &amp;[2, 3]);\n</code></pre>"},{"location":"programming/rust/#data-structures","title":"Data Structures","text":""},{"location":"programming/rust/#enums","title":"Enums","text":"<pre><code>#[derive(Debug, PartialEq, Copy, Clone)]\npub enum VideoGameGenre {\n    FPS,\n    MOBA,\n    Platformer,\n    Metroidvania,\n    RPG,\n}\n</code></pre>"},{"location":"programming/rust/#structs","title":"Structs","text":""},{"location":"programming/rust/#declaration_2","title":"Declaration","text":"<pre><code>struct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n</code></pre> <p>Struct update syntax allows the remaining, unspecified fields of a new instantiation to be filled in by the values of another. The following example</p> <pre><code>struct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\nfn main() {\n    // --snip--\n\n    let user2 = User {\n        email: String::from(\"another@example.com\"),\n        ..user1\n    };\n}\n</code></pre>"},{"location":"programming/rust/#update-syntax","title":"Update Syntax","text":""},{"location":"programming/rust/#useful-articles-docs","title":"Useful Articles / Docs","text":"<ul> <li>self Keyword</li> <li>Mutable References To 'self' In Rust's Objecdt Methods</li> </ul>"},{"location":"programming/rust/#tuple-structs","title":"Tuple structs","text":"<pre><code>struct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\nfn main() {\n    let black = Color(0, 0, 0);\n    let origin = Point(0, 0, 0);\n}\n</code></pre>"},{"location":"programming/rust/#functions","title":"Functions","text":""},{"location":"programming/rust/#associated-function","title":"Associated Function","text":"<p>An associated function refers to any function defined withing an <code>impl</code>. These functions can be methods or non-methods.</p> <ul> <li>Methods include <code>self</code> as the first parameter. Methods are accessed <code>.</code></li> <li>Non-methods do not require a <code>self</code>. Non-methods are accessed with <code>::</code></li> </ul>"},{"location":"programming/rust/#methods","title":"Methods","text":"<p>Use the <code>impl</code> keyword to define methods on <code>structs</code>. A method must have a either <code>self</code>, <code>&amp;self</code>, or <code>&amp;mut self</code> as it's first parameter.</p> <pre><code>#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn area(&amp;self) -&gt; u32 {\n        self.width * self.height\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        rect1.area()\n    );\n}\n</code></pre>"},{"location":"programming/rust/#generics","title":"Generics","text":""},{"location":"programming/rust/#traits","title":"Traits","text":""},{"location":"programming/rust/#traits-as-parameters","title":"Traits as Parameters","text":""},{"location":"programming/rust/#traits-bounds","title":"Traits Bounds","text":"<ul> <li>Compound trait bounds with <code>+</code></li> <li><code>where</code> clause   <pre><code>fn some_function&lt;T, U&gt;(t: &amp;T, u: &amp;U) -&gt; i32\nwhere T: Display + Clone,\n    U: Clone + Debug\n{\n</code></pre></li> </ul>"},{"location":"programming/rust/#lifetimes","title":"Lifetimes","text":""},{"location":"programming/rust/#lifetime-annotation-syntax","title":"Lifetime Annotation Syntax","text":"<pre><code>&amp;i32        // a reference\n&amp;'a i32     // a reference with an explicit lifetime\n&amp;'a mut i32 // a mutable reference with an explicit lifetime\n\nfn longest&lt;'a&gt;(x: &amp;'a str, y: &amp;'a str) -&gt; &amp;'a str {\n    if x.len() &gt; y.len() {\n        x\n    } else {\n        y\n    }\n}\n\n#### Lifetime Ellision Rules\n#### The Static Lifetime\n</code></pre>"},{"location":"programming/rust/#attributes","title":"Attributes","text":""},{"location":"programming/rust/#panic","title":"panic!","text":""},{"location":"programming/rust/#compilation-building","title":"Compilation / Building","text":""},{"location":"programming/rust/#cargo","title":"Cargo","text":"<ul> <li>Run <code>cargo doc --open</code> from the project directory to open a local webpage listing docs for all the project's dependencies listed in <code>Cargo.toml</code></li> </ul>"},{"location":"programming/rust/#rustc","title":"rustc","text":"<ul> <li>Use <code>rustc file.rs</code> to compile a rust binary</li> </ul>"},{"location":"programming/rust/#rustup","title":"rustup","text":""},{"location":"programming/rust/#paths-using-modules","title":"Paths / using modules","text":"<ul> <li>The <code>pub</code> keyword</li> </ul>"},{"location":"programming/rust/#packages-and-crates","title":"Packages and Crates","text":"<ul> <li>Packages: one or more crates that provide functionality. A package contains a <code>Cargo.toml</code> files that describes how to build the crates.</li> <li>Crates</li> <li>Binary crate: programs that can be compiled into an executable, must have a <code>main</code> functions</li> <li>Library crate: defines functions to be shared to other projects, does NOT have a <code>main</code> function</li> <li>A package can contain at most one library crate. It can contain as many binary crates as you\u2019d like, but it must contain at least one crate (either library or binary).</li> <li>Use <code>cargo new &lt;dir&gt;</code> to create a new crate (library crate by default) in the <code>dir</code> directory</li> <li>Specify a binary crate with <code>cargo new &lt;dir&gt; --bin</code></li> </ul>"},{"location":"security/autopsy/","title":"Autopsy","text":"<p>Open source forensics platform for analyzing mobile devices and digital media.</p> <p>Autopsy User Guide</p>"},{"location":"security/autopsy/#workflow","title":"Workflow","text":"<ol> <li>Create a case for the data source you're investigating</li> <li>Select the data source to analyze</li> <li>Configure the ingest modules to extract specific artifacts from the data source</li> <li>Review the artifacts extracted by the ingest modules</li> <li>Create the report</li> </ol>"},{"location":"security/autopsy/#things-to-research","title":"Things to Research","text":"<ul> <li>Global Hash Lookup Settings</li> <li>Global File Extension Mismatch Identification Settings</li> <li>Global Keyword Search Settings</li> <li>Global Interesting Items Settings</li> <li>Yara Analyzer</li> <li>3rd party modules</li> <li>Reference datasets</li> </ul>"},{"location":"security/gdb/","title":"GDB","text":"<p>Brackets <code>[</code> <code>]</code> may be used inside command sequences to indicate potential shortcuts.</p>"},{"location":"security/gdb/#help","title":"Help","text":"<p>Use <code>apro[pos] [REGEX]</code> to search the gdb help menus</p>"},{"location":"security/gdb/#debugging","title":"Debugging","text":""},{"location":"security/gdb/#break-breakpoints","title":"Break / Breakpoints","text":"<p>Show breakpoints with <code>info br[eakpoints]</code> Set a conditional breakpoint with <code>break [address] if [condition]</code> Delete breakpoints with <code>delete br[eakpoints]</code></p> <ul> <li>Watchpoints</li> <li>Catchpoints</li> <li>Tracepoints</li> </ul>"},{"location":"security/gdb/#stepping-seeking","title":"Stepping / Seeking","text":""},{"location":"security/gdb/#layout","title":"Layout","text":"<p>Use <code>tui dis[able]</code> or the shortcut <code>ctrl + x</code> <code>a</code> to close any TUI layout.</p>"},{"location":"security/gdb/#memory","title":"Memory","text":"<p>Searching</p> <p>Examining</p> <p>Printing</p>"},{"location":"security/gdb/#variables","title":"Variables","text":"<ul> <li>Print local variables with <code>info locals</code>.</li> <li>Print all static and globals with <code>info var[iables]</code>.</li> <li>This command may also take a regex parameter like <code>info variables [REGEX]</code></li> <li>The regex can apply to the variable type with <code>-t</code> like <code>info variables -t uint</code></li> <li>Set a variable with <code>set $[VARIABLE] = [VALUE]</code></li> <li>Print a variable with <code>p[rint] $[VARIABLE]</code></li> </ul>"},{"location":"security/gdb/#threads","title":"Threads","text":"<p>Print the backtrace for all threads with <code>thread apply all bt</code></p>"},{"location":"security/gdb/#artificial-arrays","title":"Artificial Arrays","text":""},{"location":"security/gdb/#tips-and-tricks","title":"Tips and Tricks","text":"<ul> <li>Use <code>pipe [command] | [shell_command]</code> to send gdb command output to a shell command</li> <li>Position-Independent Executable can be a pain to debug. <code>gdb</code> loads them at either <code>0x000055555555554000</code> or <code>0x7ffff7ffc000</code>. To make it easier to add breakpoints you can set a <code>$base</code> address in your gdb script like this <code>set $base =00x7ffff7ffc000</code> and then set breakpoints with <code>break *($base +00x1023)</code> for example.</li> </ul>"},{"location":"security/metasploit/","title":"Metasploit Notes","text":""},{"location":"security/metasploit/#basics","title":"Basics","text":"Commmand Description <code>search &lt;keyword&gt;</code> Search metasploit's db for exploits <code>get &lt;var&gt;</code> Get context-specific variable <code>setg &lt;var&gt;</code> Set global variable <code>unset &lt;var&gt;</code> Unset context-specific variable <code>db_nmap &lt;options&gt; &lt;host&gt;</code> store nmap scan in database <code>services</code> list open services on target <code>hosts</code> list host info in database <code>vulns</code> list vulns <code>edit</code> edit exploit source code"},{"location":"security/metasploit/#meterpreter-windows","title":"meterpreter (windows)","text":"Commmand Description <code>migrate &lt;PID&gt;</code> migrate to another process <code>run post/windows/gather/checkvm</code> check if target is a VM <code>use exploit/multi/handler</code> setup msfvenom reverse shell payload listener, don't forget to set LHOST and LPORT <code>set payload windows/meterpreter/reverse_tcp run</code> setup windows meterpreter reverse shell"},{"location":"security/metasploit/#project-management","title":"Project Management","text":"Commmand Description <code>msfdb init</code> create metasploit database <code>db_status</code> connect to db <code>workspace</code> setup workspace"},{"location":"security/pwntools/","title":"Pwntools","text":""},{"location":"security/pwntools/#tips","title":"Tips","text":"<p>Run exploit scripts with <code>PWNLIB_DEBUG=1</code> for verbose debugging info.</p>"},{"location":"security/pwntools/#processes","title":"Processes","text":""},{"location":"security/pwntools/#sockets","title":"Sockets","text":""},{"location":"security/pwntools/#ssh","title":"SSH","text":""},{"location":"security/pwntools/#assembly-shellcode","title":"Assembly / shellcode","text":"<pre><code>from pwn import *\n\n# Modify execution context\nwith context.local(encoding=\"latin\", log_level=\"INFO\", arch=\"amd64\"):\n    pass # do stuff\n\n# Generate shellcode from assembly\nchal_asm = \"\"\"\nstart:  cmp     rdi, 0x7f454c46\n        mov     eax, 0\n        add     eax, [rdi + 4]\n        add     eax, [rdi + 8]\n        add     eax, [rdi + 12]\n\"\"\"\nshellcode = asm(chal_asm)\n\n### Jumps / relocations\nUse `jmp $+0x1338` when doing an indirect jump.\n</code></pre>"},{"location":"security/rizin/","title":"Radare2","text":""},{"location":"security/rizin/#command-line-arguments","title":"Command Line Arguments","text":"<pre><code># run radare2 in debug mode\nrizin -d &lt;binary&gt;\n\n# Analyze binary on startup\nrizin -A &lt;binary&gt;  # runs aaa\nrizin -AA &lt;binary&gt; # runs aaaa\n\n# Run script file - runs commands after loading binary\nrizin -i &lt;script&gt; -d &lt;binary&gt;\n\n# Seek to address after file load\nrizin -s &lt;addr&gt;\n</code></pre>"},{"location":"security/rizin/#debugging","title":"Debugging","text":"<pre><code>ood &lt;arg1&gt; &lt;arg2&gt;   # restart program in debug mode and send args to current binary\n</code></pre>"},{"location":"security/splunk/","title":"Splunk","text":""},{"location":"security/splunk/#misc-notes","title":"Misc Notes","text":"<ul> <li>Don't get attached to a particular source type, it's important to corroborate any suspicious activity with multiple source when possible.</li> </ul>"},{"location":"security/splunk/#bots-v1-example-queries","title":"BOTS v1 Example Queries","text":"<ul> <li>Extract password attempt counts</li> </ul> <pre><code>index=botsv1 sourcetype=stream:http form_data=*username*passwd* dest_ip=192.168.250.70\n| rex field=form_data \"passwd=(?&lt;userpassword&gt;\\w+)\"\n| stats count by userpassword\n| sort - count\n</code></pre> <ul> <li>Get average length of passwords used in brute force</li> </ul> <pre><code>index=botsv1 sourcetype=stream:http http_method=POST\n| rex field=form_data \"passwd=(?&lt;userpassword&gt;\\w+)\"\n| search userpassword=*\n| eval mylen=len(userpassword)\n| stats avg(mylen) as avg_len_http\n| eval avg_len_http=round(avg_len_http,0)\n</code></pre> <ul> <li>Calculate difference (duration) between two events with a <code>transaction</code></li> </ul> <pre><code>index=botsv1 sourcetype=stream:http\n| rex field=form_data \"passwd=(?&lt;userpassword&gt;\\w+)\"\n| search userpassword=batman\n| transaction userpassword\n| table duration\n</code></pre> <ul> <li>Calculate unique password attempts</li> </ul> <pre><code>index=botsv1 sourcetype=stream:http\n| rex field=form_daa \"passwd=(?&lt;userpassword&gt;\\w+)\"\n| stats dc(userpassword)\n</code></pre> <ul> <li>Identify the name of the file that defaced <code>imreallynotbatman.com</code> website with the Fortigate Firewall Events   <pre><code>index=botsv1 answer=23.22.63.114 sourcetype=stream:dns | stats values(\"name{}\")\n</code></pre></li> </ul>"},{"location":"security/volatility/","title":"Volatility3","text":""},{"location":"security/volatility/#windows","title":"Windows","text":""},{"location":"security/volatility/#process-info","title":"Process Info","text":"<pre><code>vol.py -f memdump.mem windows.info.Info\n</code></pre>"},{"location":"security/volatility/#process-dump","title":"Process Dump","text":"<pre><code>vol.py -f memdump.mem windows.pslist.PsList\nvol.py -f memdump.mem windows.pstree.PsTree\n</code></pre>"},{"location":"security/volatility/#memory-dump","title":"Memory Dump","text":""},{"location":"security/volatility/#dlls","title":"DLLs","text":"<pre><code>vol.py -f memdump.mem windows.dlllist.DllList\nvol.py -f memdump.mem windows.dumpfiles.DumpFiles --pid &lt;pid&gt;\n</code></pre>"},{"location":"security/volatility/#network-info","title":"Network Info","text":"<pre><code>vol.py -f memdump.mem windows.netscan.NetScan\n</code></pre>"},{"location":"security/volatility/#registry","title":"Registry","text":""},{"location":"security/volatility/#malware","title":"Malware","text":"<pre><code>vol.py -f memdump.mem windows.malfind.Malfind --dump\n</code></pre>"},{"location":"virtualization/docker/","title":"Docker","text":""},{"location":"virtualization/docker/#dockerfile","title":"Dockerfile","text":"<p>TODO</p>"},{"location":"virtualization/docker/#docker-compose","title":"Docker Compose","text":"<p>Docker compose uses <code>yaml</code> files</p> <ul> <li>YAML anchors, Aliases, and Extensions</li> <li>YAML Anchors and X Properties</li> <li>Official Compose Specification</li> </ul>"},{"location":"windows/cmd/","title":"Cmd","text":"<ul> <li><code>cd</code>: print working directory</li> <li><code>type</code>: cat for windows</li> <li><code>move &lt;src&gt; &lt;dest&gt;</code>: move files</li> <li><code>del</code>: delete file</li> <li><code>replace</code>: replace file with another</li> <li><code>copy</code>/<code>robocopy</code>: copy files</li> <li><code>sc query</code>: lists running services</li> <li><code>wevtutil</code>: retrieve info about event logs and publishers</li> <li><code>el</code>: enumerate service logs</li> <li><code>dir /b/s *&lt;file&gt;</code>: search for file recursively, accespts blobs</li> <li><code>powershell -c</code>/<code>powershell iex</code>: execute powershell command</li> <li><code>systeminfo</code>: list configuration info for the machine's OS, hardware etc.</li> <li><code>ver</code></li> <li><code>tasklist</code></li> <li><code>netstat -an</code>: list all active network connections</li> <li><code>-a</code>: lists all connection</li> <li><code>-n</code>: doesn't resolve hosts (shows IPs)</li> </ul>"},{"location":"windows/powershell/","title":"Powershell","text":""},{"location":"windows/powershell/#common-verbs-aliases","title":"Common Verbs (aliases)","text":"<pre><code>GET (g)\nStart (sa)\nStop (sp)\nRead (rd)\nWrite (wr)\nNew (n)\nOut (o)\n</code></pre>"},{"location":"windows/powershell/#help","title":"Help","text":"<pre><code># get command examples\nGet-Help Get-Command -Examples\n# list all installed GET cmdlets, allows for pattern matching\nGet-Command Get-*\n# list all installed Job cmdlets, allows for patter matching\nGet-Command *-Job\n</code></pre>"},{"location":"windows/powershell/#object-manipulation-with-instead-of-passing-around-text-or-strings-like-other-shells-powershell-uses-objects","title":"Object Manipulation with <code>|</code>: instead of passing around text or strings like other shells, powershell uses Objects","text":"<pre><code># view member methods for Get-Command\nGet-Command | Get-Member -MemberType Method\n# view member properties for Get-Command\nGet-Command | Get-Member -MemberType Properties\n# create new object from properties with Select-Object\nGet-ChildItem | Select-Object -Property Mode, Name\n</code></pre>"},{"location":"windows/powershell/#filter-objects-with-where-object","title":"Filter Objects with <code>Where-Object</code>","text":"<pre><code># list stopped processes\nGet-Service | Where-Object -Property Status -eq Stopped\n</code></pre>"},{"location":"windows/powershell/#enumeration","title":"Enumeration","text":"<pre><code># get list of local users\nGet-WmiObject -Class Win32_UserAccount -Filter  \"LocalAccount='True'\" | select name, fullname, sid, passwordrequired\n# get count of local groups / Measure-Object is similar to unix wc\nGet-LocalGroup | Measure-Object\n# list members of \"Advministrators\" group\nGet-LocalGroupMember -Group \"Administrators\"\n# ip info\nGet-NetIpAddress\n# open/listening ports\nGet-NetTCPConnection -State Listen\nnetstat -a | Select-String listening | Measure-Object\n# list installed updates/patches\nGet-HotFix\n# list running processes\nGet-Process\n# show file/directory permissions\nGet-ACL C:\\\n# recursive grep\nGet-ChildItem c:\\ -Recurse | Select-String -Pattern \"pattern\" -CaseSensitive\n</code></pre>"},{"location":"windows/powershell/#get-winevent","title":"Get-WinEvent","text":"<pre><code># Get WLMS events with System time of '2020-12-15T01:09:08.940277500Z'\nGet-WinEvent -LogName \"Application\" -FilterXPath '*/System/Provider[@Name=\"WLMS\"] and */System/TimeCreated[@SystemTime=\"2020-12-15T01:09:08.940277500Z\"]'\n# Get security events for username Sam with an event id of 4720\nGet-WinEvent -LogName \"Security\" -FilterXPath '*/EventData/Data[@Name=\"TargetUserName\"]=\"Sam\" and */System/EventID=4720'\n</code></pre>"},{"location":"windows/powershell/#useful-misc-commands","title":"Useful Misc Commands","text":"<pre><code># print working directory\nGet-Location\n# grep for windows\nSelect-String\n# download file from http server\nInvoke-WebRequest -Uri &lt;URL&gt; -OutFile &lt;output-location&gt;\n# alias for `Invoke-WebRequest`\niwr\n# list all event logs on the system\nGet-EventLog -List\n# start a process\nStart-Process &lt;process name&gt;\n# stop a\"process\"\nStop-Process &lt;process name&gt;\n# create new user with 'username' &amp; 'password'\nNew-LocalUser \"username\" -Password \"password\"\n</code></pre> <pre><code># Display output in a tabular format with Out-GridView\nGet-Process | Select-Object * | Out-GridView\n</code></pre>"},{"location":"windows/windows/","title":"Windows Tips and Tricks","text":""},{"location":"windows/windows/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":""},{"location":"windows/windows/#misc","title":"Misc","text":"<p><code>Win + x</code>: opens command menu</p>"},{"location":"windows/windows/#manage-windows-and-workspaces","title":"Manage Windows and Workspaces","text":"<ul> <li><code>Alt + Tab</code>: cycle through open windows</li> <li><code>Win + Tab</code>: cycle through open windows with preview</li> <li><code>Win + d</code>: hide / unhide all open windows</li> <li><code>Win + m</code>: minimize all open windows (no unhide)</li> <li><code>Win + \u2192</code>: snap window to right side of screen (fills half of the screen's width)</li> <li><code>Win + \u2190</code>: snap window to left side of screen (fills half of the screen's width)</li> <li><code>Alt + SPACE</code>: open context menu for active window</li> <li><code>Ctrl + Win + d</code>: create a new workspace</li> <li><code>Ctrl + Win + \u2190</code>: cycle workspaces to the left</li> <li><code>Ctrl + Win + \u2192</code>: cycle workspaces to the right</li> </ul>"},{"location":"windows/windows/#run-dialog-win-r-commands","title":"Run Dialog (<code>Win + r</code>) commands","text":"<ul> <li><code>wf.msc</code>: open firewall configuration</li> <li><code>regedit</code>: open registry editor</li> <li><code>shell:startup</code>: open windows folder for programs that run on startup for the current user</li> <li><code>shell:common startup</code>: open windows folder for programs that run on startup for all users</li> </ul>"},{"location":"windows/windows/#windows-explorer","title":"Windows Explorer","text":"<ul> <li><code>Ctrl + l</code>: go to address bar (to enter a full or relative file path)</li> <li><code>Ctrl + h</code>: hide / unhide hidden files</li> </ul>"}]}